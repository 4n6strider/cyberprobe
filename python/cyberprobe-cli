#!/usr/bin/env python

import cyberprobe
import sys
import argparse
from tabulate import tabulate

p = argparse.ArgumentParser(description="Cyberprobe client")
p.add_argument("--host", "-H", dest="host", default="localhost", 
               help="Cyberprobe host.  "
               "Defaults to localhost.")
p.add_argument("--port", "-P", dest="port", default="3333", 
               help="Port where the Poll Service is hosted. Defaults to "
               "3333.")
p.add_argument("--username", "-u", dest="username", default="admin", 
               help="Username. Defaults to admin.")
p.add_argument("--password", "-p", dest="password", default="",
               help="Password.")
p.add_argument("--action", "-a", dest="action", default="list-targets",
               help="Subscription action")
p.add_argument("--delay", dest="delay", default=0.0,
               help="Interface delay")
p.add_argument("--filter", "-f", dest="filter",
               help="Interface filter")
p.add_argument("--address", dest="address",
               help="Address")
p.add_argument("--class", dest="clss", default="ipv4",
               help="Target address class: ipv4 (default) or ipv6")
p.add_argument("--device", dest="device",
               help="Device name")
p.add_argument("--network", dest="network",
               help="Network name")
p.add_argument("--endpoint-host", dest="ep_host",
               help="Endpoint host")
p.add_argument("--endpoint-port", dest="ep_port", default=3333,
               help="Endpoint port")
p.add_argument("--type", dest="type", default="etsi",
               help="Endpoint type: etsi or nhis.")
p.add_argument("--transport", dest="transport", default="tcp",
               help="Endpoint transport: tcp (default) or tls")
p.add_argument("--key", dest="key",
               help="Endpoint TLS key pathname")
p.add_argument("--certificate", dest="certificate",
               help="Endpoint TLS certificate pathname")
p.add_argument("--chain", dest="chain",
               help="Endpoint TLS chain pathname")
p.add_argument("--pkey", dest="pkey",
               help="Parameter key")
p.add_argument("--pvalue", dest="pvalue",
               help="Parameter value")

args = p.parse_args()

cli = cyberprobe.Client(args.host, int(args.port))
cli.auth(args.username, args.password)

if args.action == "list-endpoints":
   o = cli.get_endpoints()
   print tabulate(o, "keys", tablefmt="simple")
elif args.action == "list-targets":
   o = cli.get_targets()
   print tabulate(o, "keys", tablefmt="simple")
elif args.action == "list-parameters":
   o = cli.get_parameters()
   o = [[k, o[k]] for k in o]
   print o
   print tabulate(o, ["key","value"], tablefmt="simple")
elif args.action == "list-interfaces":
   o = cli.get_interfaces()
   print tabulate(o, "keys", tablefmt="simple")
elif args.action == "add-interface":
   cli.add_interface(args.interface, args.delay, args.filter)
elif args.action == "remove-interface":
   cli.remove_interface(args.interface, args.delay, args.filter)
elif args.action == "add-target":
   cli.add_target(args.device, args.address, args.clss, args.network)
elif args.action == "remove-target":
   cli.remove_target(args.device, args.address, args.clss, args.network)
elif args.action == "add-endpoint":
   cli.add_endpoint(args.ep_host, args.ep_port,
                    args.type, args.transport, args.key,
                    args.certificate, args.chain)
elif args.action == "remove-endpoint":
   cli.remove_endpoint(args.ep_host, args.ep_port,
                       args.type, args.transport, args.key,
                       args.certificate, args.chain)
elif args.action == "add-parameter":
   cli.add_parameter(args.pkey, args.pvalue)
elif args.action == "remove-parameter":
   cli.remove_parameter(args.pkey, args.pvalue)
else:
   print "Command " + command + " not recognised."
   sys.exit(1)

sys.exit(0)


   

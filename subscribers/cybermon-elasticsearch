#!/usr/bin/env python

import zmq
import json
import sys
import requests
import time

############################################################################

if len(sys.argv) < 2:
    binding = "tcp://localhost:5555"
else:
    binding = sys.argv[1]
    
es_index = "cyberprobe"
es_object = "observation"

if len(sys.argv) < 3:
    es_url = "http://localhost:9200/"
else:
    es_url = sys.argv[2]

############################################################################

def init():

    mapping = {
        es_object: {
            "properties": {
		"id": { "type": "keyword" },
		"time": { "type": "date" },
		"url": { "type": "keyword" },
		"action": { "type": "keyword" },
		"device": { "type": "keyword" },
		"dns": {
		    "properties": {
		        "type": {
		            "type": "keyword"
		        },
                        "query": {
		            "properties": {
		                "name": {
		                    "type": "keyword"
		                },
		                "type": {
		                    "type": "keyword"
		                },
		                "class": {
		                    "type": "keyword"
		                }
		            }
		        },
		        "answer": {
		            "properties": {
		                "name": {
		                    "type": "keyword"
		                },
		                "type": {
		                    "type": "keyword"
		                },
		                "class": {
		                    "type": "keyword"
		                },
		                "address": {
		                    "type": "keyword"
		                }
		            }
		        }
		    }
		},
		"http": {
		    "properties": {
		        "method": {
		            "type": "keyword"
		        },
		        "status": {
		            "type": "keyword"
		        },
		        "code": {
		            "type": "integer"
		        },
		        "header": {
		            "properties": {
		                "User-Agent": {
		                    "type": "keyword"
		                },
		                "Host": {
		                    "type": "keyword"
		                },
		                "Content-Type": {
		                    "type": "keyword"
		                },
		                "Server": {
		                    "type": "keyword"
		                },
		                "Connection": {
		                    "type": "keyword"
		                }
		            }
		        }
		    }
		},
		"ftp": {
		    "properties": {
		        "command": {
		            "type": "keyword"
		        },
		        "status": {
		            "type": "integer"
		        },
		        "text": {
		            "type": "text"
		        }
		    }
		},
		"icmp": {
		    "properties": {
		        "type": {
		            "type": "integer"
		        },
		        "code": {
		            "type": "integer"
		        }
		    }
		},
		"sip": {
		    "properties": {
		        "method": {
		            "type": "keyword"
		        },
		        "from": {
		            "type": "keyword"
		        },
		        "to": {
		            "type": "keyword"
		        },
		        "status": {
		            "type": "keyword"
		        },
		        "code": {
		            "type": "integer"
		        }
		    }
		},
		"smtp": {
		    "properties": {
		        "command": {
		            "type": "keyword"
		        },
		        "from": {
		            "type": "keyword"
		        },
		        "to": {
		            "type": "keyword"
		        },
		        "status": {
		            "type": "keyword"
		        },
		        "text": {
		            "type": "text"
		        },
		        "code": {
		            "type": "integer"
		        }
		    }
		},
		"ntp": {
		    "properties": {
		        "version": {
		            "type": "integer"
		        },
		        "mode": {
		            "type": "integer"
		        }
		    }
		},
		"src": {
		    "properties": {
		        "ipv4": {
		            "type": "ip"
		        },
		        "ipv6": {
		            "type": "ip"
		        },
		        "tcp": {
		            "type": "integer"
		        },
		        "udp": {
		            "type": "integer"
		        }
		    }
		},
		"dest": {
		    "properties": {
		        "ipv4": {
		            "type": "ip"
		        },
		        "ipv6": {
		            "type": "ip"
		        },
		        "tcp": {
		            "type": "integer"
		        },
		        "udp": {
		            "type": "integer"
		        }
		    }
		},
		"location": {
		    "properties": {
		        "src": {
		            "properties": {
		                "city": {
		                    "type": "keyword"
		                },
		                "iso": {
		                    "type": "keyword"
		                },
		                "country": {
		                    "type": "keyword"
		                },
		                "asnum": {
		                    "type": "integer"
		                },
		                "asorg": {
		                    "type": "keyword"
		                },
		                "position": {
		                    "type": "geo_point"
		                },
		                "accuracy": {
		                    "type": "integer"
		                },
		                "postcode": {
		                    "type": "keyword"
		                }
		            }
		        },
		        "dest": {
		            "properties": {
		                "city": {
		                    "type": "keyword"
		                },
		                "iso": {
		                    "type": "keyword"
		                },
		                "country": {
		                    "type": "keyword"
		                },
		                "asnum": {
		                    "type": "integer"
		                },
		                "asorg": {
		                    "type": "keyword"
		                },
		                "position": {
		                    "type": "geo_point"
		                },
		                "accuracy": {
		                    "type": "integer"
		                },
		                "postcode": {
		                    "type": "keyword"
		                }
		            }
		        }
		    }
		},
		"indicators": {
		    "properties": {
		        "id": {
		            "type": "keyword"
		        },
		        "type": {
		            "type": "keyword"
		        },
		        "value": {
		            "type": "keyword"
		        },
		        "description": {
		            "type": "keyword"
		        },
		        "category": {
		            "type": "keyword"
		        },
		        "author": {
		            "type": "keyword"
		        },
		        "source": {
		            "type": "keyword"
		        }
		    }
		}
	    }
	}
    }

    u = "%s%s" % (es_url, es_index)

    while True:
        try: 
            r = requests.put(u)
            if r.status_code != 201 and r.status_code != 200 and r.status_code != 400:
                sys.stderr.write("elasticsearch: Error sending.\n")
                sys.stderr.write("elasticsearch: HTTP code: " + str(r.status_code) + "\n")
                print r.text
            sys.stderr.write("elasticsearch: Index create: %d\n" % r.status_code)
            break
        except Exception, e:
            sys.stderr.write("elasticsearch: Exception: %s\n" % str(e))
            time.sleep(1)

    u = "%s%s/_mapping/%s" % (es_url, es_index, es_object)

    while True:
        try: 
            r = requests.put(u, data=json.dumps(mapping),
                             headers={"Content-Type": "application/json"})
            if r.status_code != 201 and r.status_code != 200 and r.status_code != 400:
                sys.stderr.write("elasticsearch: Error sending to ElasticSearch\n")
                sys.stderr.write("elasticsearch: HTTP code: " + str(r.status_code) + "\n")
                print r.text
            sys.stderr.write("elasticsearch: Mapping put: %d\n" % r.status_code)
            break
        except Exception, e:
            sys.stderr.write("elasticsearch: Exception: %s\n" % str(e))
            time.sleep(1)

def output(obs, id):

    u = "%s%s/%s/%s" % (es_url, es_index, es_object, id)

    r = requests.put(u, data=json.dumps(obs),
                     headers={"Content-Type": "application/json"})
    if r.status_code != 201:
        print "Error sending to ElasticSearch"
        print "HTTP code: " + str(r.status_code)

        print r.text

############################################################################

def handle(msg):

    ob = {}
    ob["id"] = msg["id"]
    ob["action"] = msg["action"]
    ob["device"] = msg["device"]
    ob["time"] = msg["time"]
    if msg.has_key("url"): ob["url"] = msg["url"]
    if msg.has_key("location"): ob["location"] = msg["location"]
    
    if msg.has_key("dns_message"):

        ob["dns"] = {}

        if msg["dns_message"].has_key("query"):

            name = []
            tpe = []
            clss = []

            for v in msg["dns_message"]["query"]:
                if v.has_key("name"): name.append(v["name"])
                if v.has_key("type"): tpe.append(v["type"])
                if v.has_key("class"): clss.append(v["class"])

            ob["dns"]["query"] = {
                "name": name, "type": tpe, "class": clss
            }

        if msg["dns_message"].has_key("answer"):

            name = []
            tpe = []
            clss = []
            address = []

            for v in msg["dns_message"]["answer"]:
                if v.has_key("name"): name.append(v["name"])
                if v.has_key("type"): tpe.append(v["type"])
                if v.has_key("class"): clss.append(v["class"])
                if v.has_key("address"): address.append(v["address"])

            ob["dns"]["answer"] = {
                "name": name, "type": tpe, "class": clss, "address": address
            }

            ob["dns"]["type"] = msg["dns_message"]["type"]

    if msg.has_key("indicators"):

        tpe = []
        id = []
        value = []
        desc = []

        for v in msg["indicators"]:
            tpe.append(v["type"])
            id.append(v["id"])
            value.append(v["value"])
            desc.append(v["description"])

        ob["indicators"] = {
            "type": tpe,
            "id": id,
            "value": value,
            "description": desc
        }

    if msg.has_key("http_request"):
        ob["http"] = {
            "method": msg["http_request"]["method"],
            "header": msg["http_request"]["header"]
        }

    if msg.has_key("http_response"):
        ob["http"] = {
            "status": msg["http_response"]["status"],
            "code": msg["http_response"]["code"],
            "header": msg["http_response"]["header"]
        }

    if msg.has_key("ftp_request"):
        ob["ftp"] = {
            "command": msg["ftp_request"]["command"]
        }

    if msg.has_key("ftp_response"):
        ob["ftp"] = {
            "status": msg["ftp_response"]["status"],
            "text": msg["ftp_response"]["text"]
        }

    if msg.has_key("icmp"):
        ob["icmp"] = {
            "type": msg["icmp"]["type"],
            "code": msg["icmp"]["code"]
        }

    if msg.has_key("sip_request"):
        ob["sip"] = {
            "method": msg["sip_request"]["method"],
            "from": msg["sip_request"]["from"],
            "to": msg["sip_request"]["to"]
        }

    if msg.has_key("sip_response"):
        ob["sip"] = {
            "code": msg["sip_response"]["code"],
            "status": msg["sip_response"]["status"],
            "from": msg["sip_response"]["from"],
            "to": msg["sip_response"]["to"]
        }

    if msg.has_key("smtp_command"):
        ob["smtp"] = {
            "command": msg["smtp_command"]["command"]
        }

    if msg.has_key("smtp_response"):
        ob["smtp"] = {
            "status": msg["smtp_response"]["status"],
            "text": msg["smtp_response"]["text"]
        }

    if msg.has_key("smtp_data"):
        ob["smtp"] = {
            "from": msg["smtp_data"]["from"],
            "to": msg["smtp_data"]["to"]
        }

    if msg.has_key("ntp_timestamp"):
        ob["ntp"] = {
            "version": msg["ntp_timestamp"]["version"],
            "mode": msg["ntp_timestamp"]["mode"]
        }

    if msg.has_key("ntp_control"):
        ob["ntp"] = {
            "version": msg["ntp_control"]["version"],
            "mode": msg["ntp_control"]["mode"]
        }

    if msg.has_key("ntp_private"):
        ob["ntp"] = {
            "version": msg["ntp_private"]["version"],
            "mode": msg["ntp_private"]["mode"]
        }

    src = {}

    if msg.has_key("src"):
        for v in msg["src"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if not src.has_key(cls):
                src[cls] = []

            src[cls].append(addr)

        ob["src"] = src

    dest = {}

    if msg.has_key("dest"):
        for v in msg["dest"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if not dest.has_key(cls):
                dest[cls] = []

            dest[cls].append(addr)

        ob["dest"] = dest

    output(ob, msg["id"])

############################################################################

print "Connecting to ElasticSearch..."
while True:
    url = es_url
    try:
        r = requests.get(url)
    except:
        print "Not connected, will retry..."
        time.sleep(10)
        continue

    if r.status_code == 200: break

    print "Not connected, will retry..."
    time.sleep(10)

print "Connected."

ctxt = zmq.Context()
skt = ctxt.socket(zmq.SUB)
skt.connect(binding)
skt.setsockopt(zmq.SUBSCRIBE, "")

init()

while True:
    try:
        msg = skt.recv()
        handle(json.loads(msg))
    except Exception, e:
        sys.stderr.write("Exception: %s\n" % str(e))

